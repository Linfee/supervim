snippet #!3 "pyhton3文件模板" b
#!/usr/bin/env python3
# -*- coding: utf-8 -*-


$0
endsnippet

snippet main "main" b
if __name__ == '__main__':
	$0
endsnippet

snippet doctest "doctest" b
import doctest
doctest.testmod()$0
endsnippet

snippet  traceback "traceback" b
Traceback (most recent call last):
...
$0
endsnippet

snippet decorator1 "Simple decorator" b
def ${1:name}(func):
	@functools.wraps(func)
	def wrapper(*args, **kw):$2
		print('call %s():' % func.__name__)
		return func(*args, **kw)
	return wrapper

$0
endsnippet

snippet decorator2 "Complicated decorator" b
def ${1:name}(${2:args}):
	def decorator(func):
		@functools.wraps(func)
		def wrapper(*args, **kw):$3
			print('%s %s():' % (text, func.__name__))
			return func(*args, **kw)
		return wrapper
	return decorator

$0
endsnippet

snippet partial "建立偏函数" b
functools.partial(${1:func}, ${2:*args and **kw})
endsnippet

snippet class1 "class without docstring" b
class ${1:MyClass}(${2:object}):

	def __init__(self$3):`!p
if not len(t[3]):
	snip >> 2
	snip += 'pass'
else:
	s = t[3][1:]
	s = s.replace(' ', '')
	args = s.split(',')
	args = map(lambda s: s[0:s.find('=')] if '=' in s else s, args)
	result = map(lambda s: 'self.__{0} = {0}'.format(s), args)
	snip >> 2
	for r in result:
		snip += r `

$0
endsnippet
