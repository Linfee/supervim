snippet spring-template "spring配置文件模板，包括所有命名空间" b<?xml version="1.0" encoding="UTF-8"?><beans xmlns="http://www.springframework.org/schema/beans"	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	xmlns:context="http://www.springframework.org/schema/context"	xmlns:aop="http://www.springframework.org/schema/aop"	xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"	xmlns:tx="http://www.springframework.org/schema/tx"	xmlns:mvc="http://www.springframework.org/schema/mvc"	xsi:schemaLocation="	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd	http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"></beans>endsnippetsnippet spring-mybatis "Spring和mybatis整合的配置模板，使用spring的Datasource" b<!--加载数据库配置文件--><context:property-placeholder location="classpath:db.properties"/><!--配置数据源--><bean id="c3p0DS" class="com.mchange.v2.c3p0.ComboPooledDataSource">	<property name="driverClass" value="${jdbc.driver}"/>	<property name="jdbcUrl" value="${jdbc.url}"/>	<property name="user" value="${jdbc.username}"/>	<property name="password" value="${jdbc.password}"/></bean><!--配置sqlSessionFactory --><bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">	<property name="dataSource" ref="c3p0DS"/>	<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/></bean><!--自动扫描mapper--><mybatis:scan base-package="com.linfee.st.mr.mapper" factory-ref="sqlSessionFactory"/>endsnippetsnippet springmvc-dispatcherServlet "springmvc的配置模板" b<!--自动加载spring配置文件--><context-param>	<param-name>contextConfigLocation</param-name>	<param-value>classpath:spring/applicationContext-*.xml</param-value></context-param><listener>	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class></listener><!-- spring-mvc前端控制器 --><servlet>	<servlet-name>spring-mvc</servlet-name>	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>	<!-- contextConfigLocation配置spring-mvc加载的配置文件(配置处理器映射器, 适配器等) -->	<!-- 如果不配置, 它默认加载的是 /WEB-INF/servlet名称-servlet.xml 这个文件(springmvc-servlet.xml)j -->	<init-param>		<param-name>contextConfigLocation</param-name>		<param-value>classpath:spring/springmvc.xml</param-value>	</init-param></servlet><servlet-mapping>	<!--	1. *.action  处理以 .action 结尾的请求	2. /  处理所有请求, 这里也包括的静态文件, 使用此种方法可以实现 RESUful 风格	3. /*  这样配置不对, 会导致 jsp 也有 DispatcherServlet 解析, 会报错	-->	<servlet-name>spring-mvc</servlet-name>	<url-pattern>*.do</url-pattern></servlet-mapping><welcome-file-list>	<welcome-file>index.html</welcome-file>	<welcome-file>index.jsp</welcome-file>	<welcome-file>index.ftl</welcome-file></welcome-file-list>endsnippetsnippet springmvc "springmvc配置模板" b<!--开启组件扫描--><context:component-scan base-package="com.linfee.st.mr.controller"/><!--使用注解驱动的处理器适配器和映射器--><mvc:annotation-driven/><!--配置视图解析器，这里使用jsp--><bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">	<property name="prefix" value="/WEB-INF/jsp/"/>	<property name="suffix" value=".jsp"/></bean>endsnippetsnippet spring-tx "applicationContext-tx的配置模板，配置事务的" b<!--配置spring事务--><bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">	<property name="dataSource" ref="c3p0DS"/></bean><!--声明式事务，二选一--><tx:annotation-driven transaction-manager="txManager"/><!--基于xml配置的事务，二选一--><tx:advice id="txAdvice" transaction-manager="txManager">	<tx:attributes>		<tx:method name="save*" propagation="REQUIRED"/>		<tx:method name="insert*" propagation="REQUIRED"/>		<tx:method name="upload*" propagation="REQUIRED"/>		<tx:method name="delete*" propagation="REQUIRED"/>		<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>		<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>		<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>	</tx:attributes></tx:advice><aop:config>	<aop:advisor advice-ref="txAdvice" pointcut="execution(* ${1:包}.${2:类}.${3:方法}(${4:参数}))"/></aop:config>endsnippetsnippet converter "自定义类型转换器" b<!--使用注入了自定义类型转换器的转换服务--><mvc:annotation-driven conversion-service="conversionService"/><!--转换服务bean--><bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">	<property name="converters"><!--修改它的转换器参数-->		<list>			<!--此处注入自定义的转换器-->			<bean class="com.example.ssm.controller.converter.XxxConverter"/>$0		</list>	</property></bean>endsnippet