# Snippets file for ssm(spring + spring-vmc + mybatis) develop
snippet ssm-file-upload-config "xml:spring-mvc上传解析器配置" b
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
	<property name="maxUploadSize"><!--设置最大允许上传文件大小-->
		<value>${1:5242880}</value>
	</property>
</bean>
$0
endsnippet

snippet ssm-SqlMapConfig-mini "xml:整合spring后的mybatis配置模板" b
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>

<settings>
	<setting name="mapUnderscoreToCamelCase" value="true"/>
</settings>

<typeAliases>
	<package name="${1}" />
</typeAliases>

<!--配置pageHelper插件 -->
<plugins>
	<plugin interceptor="com.github.pagehelper.PageHelper">
		<property name="dialect" value="mysql"/>
		<!--使用RowBounds分页会进行count查询-->
		<property name="rowBoundsWithCount" value="true"/>
		<!--为true时，当pageSize-0或RowBounds.limit=0会查出全部结果-->
		<property name="pageSizeZero" value="true"/>
		<!--参数合理化，默认禁用，启用时，页码不在返回会查询第一页或最后一页，禁用时，页码不在返回返回空数据-->
		<property name="reasonable" value="true"/>
	</plugin>
</plugins>

</configuration>
endsnippet

snippet ssm-SqlMapConfig-full "xml:完整的mybatis配置模板" b
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-config.dtd">

<configuration>
	<properties resource="db.properties"/>

	<settings>
		<setting name="mapUnderscoreToCamelCase" value="true"/>
	</settings>

	<typeAliases>
		$1
	</typeAliases>

	<environments default="development">
		<environment id="development">
			<transactionManager type="JDBC"/>
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}"/>
				<property name="url" value="${jdbc.url}"/>
				<property name="username" value="${jdbc.username}"/>
				<property name="password" value="${jdbc.password}"/>
			</dataSource>
		</environment>
	</environments>

<!--配置pageHelper插件 -->
<plugins>
	<!--配置pageHelper插件 -->
	<plugin interceptor="com.github.pagehelper.PageHelper">
		<property name="dialect" value="mysql"/>
		<!--使用RowBounds分页会进行count查询-->
		<property name="rowBoundsWithCount" value="true"/>
	</plugin>
	<!--配置通用mapper-->
	<plugin interceptor="com.github.abel533.mapperhelper.MapperInterceptor">
		<!--UUID生成策略-->
		<!--配置UUID生成策略需要使用OGNL表达式-->
		<!--默认值32位长度:@java.util.UUID@randomUUID().toString().replace("-", "")-->
		<!--<property name="UUID" value="@java.util.UUID@randomUUID().toString()"/>-->
		<!--主键自增回写方法,默认值MYSQL,详细说明请看文档-->
		<property name="IDENTITY" value="MYSQL"/>
		<!--序列的获取规则,使用{num}格式化参数，默认值为{0}.nextval，针对Oracle-->
		<!--可选参数一共3个，对应0,1,2,分别为SequenceName，ColumnName,PropertyName-->
		<!--<property name="seqFormat" value="{0}.nextval"/>-->
		<!--主键自增回写方法执行顺序,默认AFTER,可选值为(BEFORE|AFTER)-->
		<!--<property name="ORDER" value="AFTER"/>-->
		<!--通用Mapper接口，多个通用接口用逗号隔开-->
		<property name="mappers" value="com.github.abel533.mapper.Mapper"/>
	</plugin>
</plugins>

<mappers>
	$0
</mappers>

</configuration>
endsnippet

snippet ssm-mybatis-generator-config "xml:mybatis-generator用来生成java代码的xml配置模板" b
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<context id="testTables" targetRuntime="MyBatis3">
		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />
		</commentGenerator>
		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<jdbcConnection driverClass="com.mysql.jdbc.Driver"
			connectionURL="jdbc:mysql://localhost:3306/example" userId="root"
			password="root">
		</jdbcConnection>
		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
		NUMERIC 类型解析为java.math.BigDecimal -->
	<javaTypeResolver>
		<property name="forceBigDecimals" value="false" />
	</javaTypeResolver>

	<!-- targetProject:生成PO类的位置 -->
	<javaModelGenerator targetPackage="com.example.pojo" targetProject="./src/main/java">
		<!-- enableSubPackages:是否让schema作为包的后缀 -->
		<property name="enableSubPackages" value="false" />
		<!-- 从数据库返回的值被清理前后的空格 -->
		<property name="trimStrings" value="true" />
	</javaModelGenerator>
	<!-- targetProject:mapper映射文件生成的位置 -->
	<sqlMapGenerator targetPackage="com.example.mapper" targetProject="./src/main/resources">
		<!-- enableSubPackages:是否让schema作为包的后缀 -->
		<property name="enableSubPackages" value="false" />
	</sqlMapGenerator>
	<!-- targetPackage：mapper接口生成的位置 -->
	<javaClientGenerator type="XMLMAPPER"
		targetPackage="com.example.mapper" targetProject="./src/main/java">
		<!-- enableSubPackages:是否让schema作为包的后缀 -->
		<property name="enableSubPackages" value="false" />
	</javaClientGenerator>
	<!-- 指定数据库表 -->
	<table tableName="" domainObjectName="" />

</context>
</generatorConfiguration>
endsnippet

snippet ssm-custom-converter "xml:自定义类型转换器配置" b
<!--使用注入了自定义类型转换器的转换服务-->
<mvc:annotation-driven conversion-service="conversionService"/>
<!--转换服务bean-->
<bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
	<property name="converters"><!--修改它的转换器参数-->
		<list>
			<!--此处注入自定义的转换器-->
			<bean class="com.example.ssm.controller.converter.XxxConverter"/>$0
		</list>
	</property>
</bean>
endsnippet

snippet ssm-springmvc-mini "xml:springmvc配置模板" b
<!--开启组件扫描-->
<context:component-scan base-package="com.babsport" use-default-filters="false">
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
</context:component-scan>

<!--使用注解驱动的处理器适配器和映射器-->
<mvc:annotation-driven/>

<!--配置资源映射, 仅在DispatcherServlet的url-pattern配置为/时需要-->
<mvc:resources mapping="/css/**" location="/WEB-INF/css/"/>
<mvc:resources mapping="/js/**" location="/WEB-INF/js/"/>

<!--配置视图解析器，这里使用jsp-->
<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
	<property name="prefix" value="/WEB-INF/jsp/"/>
	<property name="suffix" value=".jsp"/>
</bean>
endsnippet

snippet ssm-mybatis "xml:Spring和mybatis整合的配置模板，使用spring的Datasource" b
<!--加载数据库配置文件，方式一-->
<context:property-placeholder location="classpath:db.properties"/>
<!--加载数据库配置文件，方式二，更底层-->
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<!--允许jvm参数覆盖-->
	<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
	<!--忽略没有找到的资源文件-->
	<property name="ignoreResourceNotFound" value="true"/>
	<!--配置资源文件-->
	<property name="locations">
		<list>
			<value>classpath:db.properties</value>
		</list>
	</property>
</bean>

<!--配置数据源-->
<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
	<property name="driverClassName" value="${jdbc.driver}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="maxActive" value="10"/>
	<property name="minIdle" value="5"/>
</bean>

<!--配置sqlSessionFactory -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
</bean>

<!--自动扫描mapper-->
<mybatis:scan base-package="com.linfee.st.mr.mapper" factory-ref="sqlSessionFactory"/>
endsnippet

snippet ssm-web-xml "xml:springmvc的web.xml的配置模板" b
<context-param>
	<param-name>spring.profiles.active</param-name>
	<param-value>dev</param-value>
</context-param>
<!--自动加载spring配置文件-->
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>classpath:spring/applicationContext-*.xml</param-value>
</context-param>
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>

<!-- spring-mvc前端控制器 -->
<servlet>
	<servlet-name>spring-mvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<!-- contextConfigLocation配置spring-mvc加载的配置文件(配置处理器映射器, 适配器等) -->
	<!-- 如果不配置, 它默认加载的是 /WEB-INF/servlet名称-servlet.xml 这个文件(springmvc-servlet.xml)j -->
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/springmvc.xml</param-value>
	</init-param>
	<init-param>
		<param-name>spring.profiles.defalut</param-name>
		<param-value>dev</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
</servlet>
<servlet-mapping>
	<!--
	1. *.action  处理以 .action 结尾的请求
	2. /	处理所有请求, 这里也包括的静态文件, 使用此种方法可以实现 RESUful 风格
	3. /x/* /x下的全部
	4. /*	这样配置不对, 会导致 jsp 也有 DispatcherServlet 解析, 会报错
	-->
	<servlet-name>spring-mvc</servlet-name>
	<url-pattern>*.do</url-pattern>
</servlet-mapping>


<welcome-file-list>
	<welcome-file>index.html</welcome-file>
	<welcome-file>index.jsp</welcome-file>
	<welcome-file>index.ftl</welcome-file>
</welcome-file-list>
endsnippet

snippet ssm-charset-encoder-filter "xml:spring乱码过滤器" b
<!--解决post乱码-->
<filter>
	<filter-name>CharacterEncodingFilter</filter-name>
	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	<init-param>
		<param-name>encoding</param-name>
		<param-value>utf-8</param-value>
	</init-param>
</filter>
<filter-mapping>
	<filter-name>CharacterEncodingFilter</filter-name>
	<servlet-name>spring-mvc</servlet-name>
</filter-mapping>
endsnippet

snippet ssm-page-helper "mybatis pageHelper插件配置模板" b
<!--配置pageHelper插件-->
<plugins>
	<plugin interceptor="com.github.pagehelper.PageHelper">
		<property name="dialect" value="mysql"/>
	</plugin>
</plugins>
endsnippet

snippet ssm-jedis-config-full "带有jedisPoolConfig的jedis单机配置" b
<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	<!-- 最大连接数 -->
	<property name="maxTotal" value="30" />
	<!-- 最大空闲连接数 -->
	<property name="maxIdle" value="10" />
	<!-- 每次释放连接的最大数目 -->
	<property name="numTestsPerEvictionRun" value="1024" />
	<!-- 释放连接的扫描间隔（毫秒） -->
	<property name="timeBetweenEvictionRunsMillis" value="30000" />
	<!-- 连接最小空闲时间 -->
	<property name="minEvictableIdleTimeMillis" value="1800000" />
	<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
	<property name="softMinEvictableIdleTimeMillis" value="10000" />
	<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
	<property name="maxWaitMillis" value="1500" />
	<!-- 在获取连接的时候检查有效性, 默认false -->
	<property name="testOnBorrow" value="true" />
	<!-- 在空闲时检查有效性, 默认false -->
	<property name="testWhileIdle" value="true" />
	<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
	<property name="blockWhenExhausted" value="false" />
</bean>

<bean id="redisClient" class="redis.clients.jedis.JedisPool">
	<constructor-arg name="host" value="your host"/>
	<constructor-arg name="port" value="your port"/>
	<!-- 如果配置的JedisPoolConfig，需要将其加入 -->
	<constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
</bean>
endsnippet

snippet ssm-jedis-config-min "推荐的，最简单的jedis单机配置" b
<bean id="redisClient" class="redis.clients.jedis.JedisPool">
	<constructor-arg name="host" value="your host"/>
	<constructor-arg name="port" value="your port"/>
</bean>
endsnippet

snippet ssm-jedisCluster-config-ful "带有JedisPoolConfig的jedis集群配置" b
<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
	<!-- 最大连接数 -->
	<property name="maxTotal" value="30" />
	<!-- 最大空闲连接数 -->
	<property name="maxIdle" value="10" />
	<!-- 每次释放连接的最大数目 -->
	<property name="numTestsPerEvictionRun" value="1024" />
	<!-- 释放连接的扫描间隔（毫秒） -->
	<property name="timeBetweenEvictionRunsMillis" value="30000" />
	<!-- 连接最小空闲时间 -->
	<property name="minEvictableIdleTimeMillis" value="1800000" />
	<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
	<property name="softMinEvictableIdleTimeMillis" value="10000" />
	<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 -->
	<property name="maxWaitMillis" value="1500" />
	<!-- 在获取连接的时候检查有效性, 默认false -->
	<property name="testOnBorrow" value="true" />
	<!-- 在空闲时检查有效性, 默认false -->
	<property name="testWhileIdle" value="true" />
	<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
	<property name="blockWhenExhausted" value="false" />
</bean>
<bean id="resisClient" class="redis.clients.jedis.JedisCluster">
	<constructor-arg name="nodes">
		<set>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7001"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7002"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7003"/>
			</bean>
		</set>
	</constructor-arg>
</bean>
endsnippet

snippet ssm-jedisCluster-config-mini "推荐的，最简单的jedis集群配置" b
<bean id="resisClient" class="redis.clients.jedis.JedisCluster">
	<constructor-arg name="nodes">
		<set>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7001"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7002"/>
			</bean>
			<bean class="redis.clients.jedis.HostAndPort">
				<constructor-arg name="host" value="127.0.0.1"/>
				<constructor-arg name="port" value="7003"/>
			</bean>
		</set>
	</constructor-arg>
	<constructor-arg name="poolConfig" value="jedisPoolConfig"/>
</bean>
endsnippet

snippet ssm-freemarker-view-resolver "springmvc的freemarker配置" b
<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	<property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
</bean>
<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	<property name="cache" value="true"/>
	<property name="prefix" value=""/>
	<property name="suffix" value=".ftl"/>
	<property name="contentType" value="text/html;charset=utf-8"/>
</bean>
endsnippet

snippet ssm-viewResolver "springmvc的viewResolver，使用freemarker和json" b
<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	<property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
</bean>

<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
	<property name="viewResolvers">
		<list>
			<bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
				<property name="cache" value="true"/>
				<property name="prefix" value=""/>
				<property name="suffix" value=".ftl"/>
				<property name="contentType" value="text/html;charset=utf-8"/>
			</bean>
		</list>
	</property>
	<property name="defaultViews">
		<list>
			<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView"/>
		</list>
	</property>
</bean>
endsnippet

snippet ssm-service "xml:springmvc配置模板" b
<context:component-scan base-package="com.linfee">
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
</context:component-scan>
endsnippet

snippet ssm-datasource-c3p0 "The c3p0 datasource" b
<!--配置数据源-->
<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
	<property name="driverClassName" value="${jdbc.driver}"/>
	<property name="url" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
	<property name="maxActive" value="10"/>
	<property name="minIdle" value="5"/>
</bean>
endsnippet

snippet ssm-datasource-bonecp "The bonecp datasource" b
<!--配置数据源-->
<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource" destroy-method="close">
	<property name="driverClass" value="${jdbc.driver}"/>
	<property name="jdbcUrl" value="${jdbc.url}"/>
	<property name="username" value="${jdbc.username}"/>
	<property name="password" value="${jdbc.password}"/>
</bean>
endsnippet

snippet ssm-placeholder "The placeholder" b
<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
		<list>
			<value>classpath:db.properties</value>
		</list>
	</property>
</bean>
endsnippet

snippet ssm-mybatis-without-SqlMapConfig "Description" b
<!--配置sqlSessionFactory -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
	<property name="mapperLocations" value="classpath:com/babsport/mapper.xml"/>
	<property name="typeAliasesPackage" value="com.babsport.pojo"/>
</bean>
endsnippet

snippet ssm-mapper-scan "Mybatis mapper scan" b
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<property name="basePackage" value="com.babsport.mapper"/>
</bean>
endsnippet

snippet ssm-mapper "The mapper.xml template" b
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.linfee.st.mapper.UserMapper">
$0
</mapper>
endsnippet
